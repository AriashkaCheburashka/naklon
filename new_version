import arcade
import random
import time
import diagonal_lib_
import math

W = 2500
H = 1200
N = 5

Durka_Color = (76, 65, 34)

def grad_to_rad(grad):
    return grad * math.pi / 180

class Durka():
    def __init__(self, x, y, x2, y2, c):
        s1 = Shar(x, y, 0, 0, Durka_Color)
        s2 = Shar(x2, y2, 0, 0, Durka_Color)
        self.color = c

    def Durka_Draw(self):
        arcade.draw_point(self.s1.x, self.s1.y, self.c, 10)
        arcade.draw_point(self.s2.x, self.s2.y, self.c, 10)

    def Check(self, shar):
        pass

class Shar():  # обьект шар
    def __init__(self, x_, y_, v_, a_, c_):
        self.x = x_
        self.y = y_
        self.v = v_
        self.a = a_
        self.c = c_

    def Draw(self):  # рисуется обьект шар
        arcade.draw_point(self.x, self.y, self.c, 10)

    def Move(self):  # движение шаров !!!!
        vy = self.v * math.sin(grad_to_rad(self.a))
        vx = self.v * math.cos(grad_to_rad(self.a))
        self.x += vx
        self.y += vy

    # def ykxplusb(self, line_, x_):
    #     if line_.x==line_.xx:
    #         k=(line_.yy - line_.y) / 1
    #     else:
    #         k = (line_.yy - line_.y) / (line_.xx - line_.x)
    #     b = line_.y
    #     dx = line_.x
    #     y = k * (x_ - dx) + b
    #     return y

    def returnx_(self, line_):
        if line_.x==line_.xx:
            k_1=(line_.yy - line_.y)
        else:
            k_1 = (line_.yy - line_.y) / (line_.xx - line_.x)
        b_ = line_.y
        k_2 = math.tan(self.a)
        b_2 = self.y - self.x * k_2
        x_ = (b_2 - b_)/(k_1 - k_2)
        return x_

    def returny_(self, line_, x_):
        if line_.x==line_.xx:
            k = (line_.yy - line_.y)
        else:
            k = (line_.yy - line_.y) / (line_.xx - line_.x)
        b = line_.y
        dx = line_.x
        y = k * (x_ - dx) + b
        return y

    def peresechenie_up_to_down(self, line_):  # пересечение сверху вниз
        if 180 - (self.a - line_.a) + line_.a <= 180:
            self.v = -self.v

        self.a = 180 - (self.a - line_.a) + line_.a
        if self.a != 180:
            self.a = self.a % 180

    def peresechenie_down_to_up(self, line_):  # пересечение снизу вверх
        self.v *= -1
        self.peresechenie_up_to_down(line_)
        self.v *= -1

    def pryam_ugol_left_side(self, line_):
        if 180 - (self.a - line_.a) + line_.a <= 180:
            self.v = -self.v

        self.a = 180 - (self.a - line_.a) + 90
        if self.a != 180:
            self.a = self.a % 180


    def pryam_ugol_right_side(self, line_):
        pass

    def Check(self, line_):  # менеджер пересечения
        x = self.returnx_(line_)
        y = self.returny_(line_, x)

        if self.a == 0: # Надо потом убрать!!!
            self.a = 0.0000001
        if self.a == 180:
            self.a = 180.0000001

        if line_.x == line_.xx: #вертикальная линия
            print("123")
            if self.x + 1 == line_.xx:
                print("iwegucfv")
                self.pryam_ugol_left_side(line_)

            #if self.x - 1 == line_.x:
            #    self.pryam_ugol_right_side(line_)


        if self.y > y and self.y - 1  <= y and self.x + 1 == x: # сверху вниз
            self.peresechenie_up_to_down(line_)

        if self.y < y and self.y + 1 >= y and self.x - 1 == x:
            self.peresechenie_down_to_up(line_)



class Orbite(arcade.Window):

    def __init__(self, w_, h_, wind_):
        super().__init__(w_, h_)
        self.w = wind_

        self.s = []

        self.t = 0
        self.lines = []
        self.durka = []
        self.h = random.randint(0, W)
        self.hh = random.randint(0, H)

    def setup(self):
        arcade.set_background_color(arcade.color.WHITE)
        self.lines.append(diagonal_lib_.Line(100, 100, 2000, 100))
        self.lines.append(diagonal_lib_.Line(100, 1000, 2000, 1000))
        self.index = 0

    def on_draw(self):
        arcade.start_render()
        for shar in self.s:
            shar.Draw()

        for line in self.lines:
            line.line_Draw()

        for durka in self.durka:
            durka.Draw()

    def on_key_press(self, symbol, modifier):

        if symbol == arcade.key.NUM_1:
            self.index = 0
        if symbol == arcade.key.NUM_2:
            self.index = 1

        if symbol == arcade.key.W:
            self.lines[self.index].move(10, 'up', 1)

        if symbol == arcade.key.D:
            self.lines[self.index].move(10, 'right', 1)

        if symbol == arcade.key.A:
            self.lines[self.index].move(10, 'left', 1)

        if symbol == arcade.key.S:
            self.lines[self.index].move(10, 'down', 1)

        if symbol == arcade.key.I:
            self.lines[self.index].move(10, 'up', 2)

        if symbol == arcade.key.L:
            self.lines[self.index].move(10, 'right', 2)

        if symbol == arcade.key.J:
            self.lines[self.index].move(10, 'left', 2)

        if symbol == arcade.key.K:
            self.lines[self.index].move(10, 'down', 2)


        #не обязательно
        if symbol == arcade.key.NUM_5:
            self.lines[0].x=800
            self.lines[0].y=100
            self.lines[0].xx=800
            self.lines[0].yy=1000
            print(self.lines[0].a)


    def update(self, delta_time):

        for shar in self.s:
            shar.Move()
            for line in self.lines:
                shar.Check(line)

            for dur in self.durka:
                dur.Check(shar)


        self.t += 1

        if self.t % 100 == 0:
            # self.s.append(Shar(random.randint(0,W), random.randint(0,H), 1, random.randint(-10, 0), (0, 0, 0)))
            self.s.append(Shar(50, random.randint(300, H-300), 1, random.randint(0,15), (0, 0, 0)))

def main():
    O = Orbite(W, H, 0)
    O.setup()
    arcade.run()

if __name__ == "__main__":
    main()
