import arcade
import random
import math

W = 2500
H = 1200
L=1
len_line=300

class Line():
    def __init__(self, x_, y_, xx_, yy_):
        if xx_>x_:
            self.x=x_
            self.xx=xx_
        else:
            self.x=xx_
            self.xx=x_
        if yy_>y_:
            self.y=y_
            self.yy=yy_
        else:
            self.y=yy_
            self.yy=y_
            
        self.tg = (self.yy-self.y)/(self.xx-self.x)
        self.a = math.atan(self.tg)*180/math.pi

    def line_Draw(self):
        arcade.draw_line(self.x, self.y, self.xx, self.yy, (15, 65, 89), 10)
        
    def Podschet(self, x_, y_, xx_, yy_):
        print("kljn")
        self.tg = (yy_-y_)/(xx_-x_)
        self.a = math.atan(self.tg)*180/math.pi

    def move(self, x_, y_, xx_, yy_):
        self.x = x_
        self.y = y_
        self.xx = xx_
        self.yy = yy_
        if xx_>x_:
            self.x=x_
            self.xx=xx_
        else:
            self.x=xx_
            self.xx=x_
        if yy_>y_:
            self.y=y_
            self.yy=yy_
        else:
            self.y=yy_
            self.yy=y_
        self.tg = (yy_-y_)/(xx_-x_)
        self.a = math.atan(self.tg)*180/math.pi

    
    
class Orbite(arcade.Window):

    def __init__(self, w_, h_):
        super().__init__(w_, h_)
    
        self.lines=[]


    def setup(self):
        arcade.set_background_color(arcade.color.WHITE)
        print("yuihgv")
        
        
    def on_draw(self):
        arcade.start_render()
        for line in self.lines:
            line.line_Draw()
        
    def update(self, delta_time):
        print( len(self.lines))
        print( self.lines[0].x)
        print(self.lines[0].y)
        
            
        
#def main():
 #   O=Orbite(W, H)
  #  O.setup()
   # arcade.run()

#if __name__=="__main__":
 #   main()
    
