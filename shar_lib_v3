import arcade
import random
import time
import diagonal_lib
import math

W = 2500
H = 1200
N = 50
#a-это угол 

def grad_to_rad(grad):
    return grad * math.pi / 180

class Shar(): #обьект шар 
    def __init__ (self, x_, y_, v_, a_):
        self.x=x_
        self.y=y_
        self.v=v_
        self.a=a_
        
        self.check_gor =False


        

    def Draw(self): #рисуется обьект шар 
        arcade.draw_point(self.x, self.y,(76, 98, 236), 10 )
       
    def Move(self):#движение шаров !!!!
        vy=self.v*math.sin(grad_to_rad(self.a))
        vx=self.v*math.cos(grad_to_rad(self.a))
        
        self.x += vx
        self.y += vy
       
    def ykxplusb(self,    line_,     x_):#функция которая 
        k =(line_.yy -line_.y)/(line_.xx-line_.x)
        b =line_.y
        dx = line_.x
        y=k*(x_-dx)+b
        return y
  
                      
    def peresechenie_up_to_down(self, line_):#пересечение сверху вниз
        B=90-line_.a
        self.a=180-(B+B+self.a)
        
         
    def peresechenie_down_to_up(self):#пересечение снизу вверх     
        pass

    def peresechenie_gorizontal_iskl(self):#пересечение частного случая прямой-горизонтальная линия
        pass

    def obschet_otr_sharov(self, line_):#определение какую функцию вызывать
        y = self.ykxplusb(line_ , self.x)

        if self.y>y and self.y- 15<=y  and line_.x<self.x<line_.xx:
            #print("касаются")
            self.peresechenie_up_to_down(line_)

        if self.y<y and self.y+15>=y and line_.x<self.x<line_.xx:
            #print("касаются")
            self.peresechenie_up_to_down(line_)

        
            

class Orbite(arcade.Window):

    def __init__(self, w_, h_, wind_):
        super().__init__(w_, h_)
        self.w=wind_
           
        self.s=[]
    
        self.t = 0
        self.lines = []


    def setup(self):
        arcade.set_background_color(arcade.color.WHITE)
        self.lines.append(diagonal_lib.Line(700,100,1000,900))
        print(self.lines[0].a)
        
        #for i in range(N):
        #    self.s.append(Shar(random.randint(0, W), random.randint(0, H), random.randint(1, 10), random.randint(0, 360)))

    def on_draw(self):
        arcade.start_render()
        for shar in self.s:
            shar.Draw()
            
        for line in self.lines:
            line.line_Draw()
                   
    def update(self, delta_time):
           
        for shar in self.s:
            shar.Move()
            shar.obschet_otr_sharov(self.lines[0])

        self.t +=1

        if self.t%30 ==0:
            self.s.append(Shar(random.randint(0, W), random.randint(0, H), random.randint(-10, 10), random.randint(-45, 45)))
                  
    

                
       
def main():
    O=Orbite(W, H, 0)
    O.setup()
    arcade.run()
    

if __name__=="__main__":
    main()
    


